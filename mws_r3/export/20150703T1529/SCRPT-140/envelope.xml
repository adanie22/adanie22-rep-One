<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns1:Envelope xmlns:ns1="http://servicemesh.com/agility/api" xmlns:ns2="http://servicemesh.com/core/messaging" ns1:version="3.0" ns1:productVersion="9.2.4">
    <ns1:Asset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns1:Script">
        <ns1:name>MWS2R3 - AD Configure Active Directory</ns1:name>
        <ns1:id>161</ns1:id>
        <ns1:description></ns1:description>
        <ns1:uuid>13e15de8-ba87-4d4f-b185-4d2601aa7dff</ns1:uuid>
        <ns1:assetType>
            <ns1:name>script</ns1:name>
            <ns1:href>assettype/2</ns1:href>
            <ns1:id>2</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.AssetType+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:assetType>
        <ns1:top>true</ns1:top>
        <ns1:assetPath>/Root/MWS2R3_SYD</ns1:assetPath>
        <ns1:detailedAssetPath>/Root:#ID#1:#TYPE#VMContainer/MWS2R3_SYD:#ID#8:#TYPE#VMProject</ns1:detailedAssetPath>
        <ns1:lifecycleVersion>-1</ns1:lifecycleVersion>
        <ns1:removable>true</ns1:removable>
        <ns1:domain>
            <ns1:name>domain1</ns1:name>
            <ns1:href>domain/1</ns1:href>
            <ns1:id>1</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Domain+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:domain>
        <ns1:creator>
            <ns1:name>mfreema6</ns1:name>
            <ns1:href>user/7</ns1:href>
            <ns1:id>7</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:creator>
        <ns1:created>2015-05-14T15:06:17+10:00</ns1:created>
        <ns1:lockType>0</ns1:lockType>
        <ns1:lastModified>2015-05-14T15:08:43+10:00</ns1:lastModified>
        <ns1:parent>
            <ns1:name>MWS2R3_SYD</ns1:name>
            <ns1:href>project/8</ns1:href>
            <ns1:id>8</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Project+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:parent>
        <ns1:slot>4fad00b7-aadf-4658-bd0c-9070c735d983</ns1:slot>
        <ns1:version>4</ns1:version>
        <ns1:latest>false</ns1:latest>
        <ns1:publishComment></ns1:publishComment>
        <ns1:slotId>128</ns1:slotId>
        <ns1:publisher>
            <ns1:name>mfreema6</ns1:name>
            <ns1:href>user/7</ns1:href>
            <ns1:id>7</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:publisher>
        <ns1:versionStatus>active</ns1:versionStatus>
        <ns1:checkoutAllowed>false</ns1:checkoutAllowed>
        <ns1:headAllowed>false</ns1:headAllowed>
        <ns1:operatingSystem>Windows|2012</ns1:operatingSystem>
        <ns1:enableExtensions>false</ns1:enableExtensions>
        <ns1:body>#	ScriptName: 	AD Configure Active Directory
#	Author: 	Mark Freeman
#	Required Variables: None
#	Description:
#
#	Creates OU Structure
#	Creates Service Accounts and stores passwords in key value store
#	Store domain dn in key value store for later use

. .\GlobalRepository.ps1
. .\new-randompassword.ps1
Start-Sleep -s 120

$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition
$scriptName = $MyInvocation.MyCommand.Name
#Saving Domain Details in key-value store

$d = get-addomain
Set-GlobalVariable &quot;AD/DistinguishedName&quot; $d.DistinguishedName

write-output &quot;Installing Active Roles Management.&quot;
Start-Process &quot;msiexec.exe&quot; -ArgumentList &quot;-i $scriptPath\ActiveRolesManagementShell_x64_1.6.0.msi /q&quot;-Wait
write-output &quot;Active Roles Management installed.&quot;


. .\1_MWS_OUimport.ps1
. .\2_MWS_PERMGroupsPerOU.ps1
. .\3_MWS_ApplyPERMGroupstoOU.ps1


$username = (get-globalvariable &quot;Global\DeploymentUsername&quot;).value
$description = &quot;Agility Deployment Account&quot;
$password = (get-globalvariable &quot;Global\DeploymentPassword&quot;).value

function CreateServiceAccount([string]$username, [string]$description,[string]$password){

    if(!$password){
	$password = new-randompassword -PasswordLength 16
	}

    $User = Get-ADUser -Filter {sAMAccountName  -eq $username}
    If ($User  -eq $Null) {&quot;User does not currently exist in AD&quot;}
    Else {
        &quot;[SKIP] User found in AD&quot;
        return
    }

    $dom = Get-ADDomain
    $dn = $dom.DistinguishedName
 
  
    New-ADUser $username `
    -Path &quot;ou=admin service accounts,ou=Administration,$dn&quot; `
    -Enable:$true `
    -PasswordNeverExpires:$true `
    -Description $description `
    -AccountPassword (ConvertTo-SecureString $password -AsPlainText -Force)

	Set-GlobalVariable &quot;ServiceAccount/$username&quot; $password
	
}

function AddUsertoDomainGroup([string]$username, [string]$groupname){

   Add-ADGroupMember $groupname $username
}


$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition
$scriptName = $MyInvocation.MyCommand.Name

write-output &quot;Adding AD management tools if required.&quot;
$addsTools = &quot;RSAT-AD-Tools&quot;
Add-WindowsFeature $addsTools

Import-Module ActiveDirectory

CreateServiceAccount -username $username -description $description -password $password
CreateServiceAccount -username &quot;aws_mws_em_admin&quot; -description &quot;SQL - EM&quot; 
CreateServiceAccount -username &quot;svc_sp_sql&quot; -description &quot;SQL - Sharepoint&quot; 
CreateServiceAccount -username &quot;svc_sp_ssas&quot; -description &quot;SSAS - Sharepoint&quot; 
CreateServiceAccount -username &quot;svc_sp_ssis&quot; -description &quot;SSIS - Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_ssrs&quot; -description &quot;SSRS - Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_farm&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_Services&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_WebAppPool&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_Content&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_UserProfile&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_SuperUser&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_SuperReader&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_Excel&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_PerfPoint&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_Access&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sp_Workflow&quot; -description &quot;Sharepoint&quot;
CreateServiceAccount -username &quot;svc_sql&quot; -description &quot;Generic SQL&quot;
CreateServiceAccount -username &quot;svc-sharefile&quot; -description &quot;Sharefile Service Account&quot;
CreateServiceAccount -username &quot;service.exchange&quot; -description &quot;Exchange Service Account&quot;
CreateServiceAccount -username &quot;svc_sccm_install&quot; -description &quot;SCCM Service Account&quot;
CreateServiceAccount -username &quot;svc_sccm_sql&quot; -description &quot;SCCM SQL Account&quot;
CreateServiceAccount -username &quot;svc_sccm_sup&quot; -description &quot;SCCM SUP Account&quot;
CreateServiceAccount -username &quot;svc_em_install&quot; -description &quot;EM install Account&quot;
CreateServiceAccount -username &quot;svc_fim&quot; -description &quot;FIM Service Account&quot;
CreateServiceAccount -username &quot;svc_xdm&quot; -description &quot;XDM Service Account&quot;
CreateServiceAccount -username &quot;svc_sp_search&quot; -description &quot;Sharepoint Service Account&quot;
CreateServiceAccount -username &quot;svc_sp_visio&quot; -description &quot;Sharepoint Service Account&quot;
CreateServiceAccount -username &quot;svc_mysitesapppool&quot; -description &quot;Sharepoint Service Account&quot;
CreateServiceAccount -username &quot;z-da-sql-omdwritr&quot; -description &quot;SCOM Service Account&quot;
CreateServiceAccount -username &quot;z-da-sql-omdredr&quot; -description &quot;SCOM Service Account&quot;
CreateServiceAccount -username &quot;z-da-om-csda&quot; -description &quot;SCOM Service Account&quot;
CreateServiceAccount -username &quot;z-da-omsrva&quot; -description &quot;SCOM Service Account&quot;



AddUserToDomainGroup &quot;service.exchange&quot; &quot;enterprise admins&quot;
AddUserToDomainGroup &quot;service.exchange&quot; &quot;domain admins&quot;
AddUserToDomainGroup &quot;service.exchange&quot; &quot;enterprise admins&quot;
AddUserToDomainGroup &quot;service.exchange&quot; &quot;schema admins&quot;
AddUserToDomainGroup &quot;svc_sccm_install&quot; &quot;schema admins&quot;

AddUserToDomainGroup $username &quot;domain admins&quot;

# Agility user must be enterprise admin for recycle bin enable
$currentuser = &quot;$env:USERNAME&quot;
AddUserToDomainGroup $currentuser &quot;enterprise admins&quot;
AddUserToDomainGroup $currentuser &quot;schema admins&quot;

Exit $LastExitCode
</ns1:body>
        <ns1:type>Guest</ns1:type>
        <ns1:language>
            <ns1:name>powershell</ns1:name>
            <ns1:href>scriptlanguage/5</ns1:href>
            <ns1:id>5</ns1:id>
            <ns1:rel>down</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.ScriptLanguage+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:language>
        <ns1:runAsAdmin>false</ns1:runAsAdmin>
        <ns1:timeout>3600</ns1:timeout>
        <ns1:retries>0</ns1:retries>
        <ns1:delay>0</ns1:delay>
        <ns1:errorAction>Continue</ns1:errorAction>
        <ns1:rebootRequired>false</ns1:rebootRequired>
        <ns1:runOnProvisionOnly>false</ns1:runOnProvisionOnly>
    </ns1:Asset>
</ns1:Envelope>
