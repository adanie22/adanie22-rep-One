<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns1:Envelope xmlns:ns1="http://servicemesh.com/agility/api" xmlns:ns2="http://servicemesh.com/core/messaging" ns1:version="3.0" ns1:productVersion="9.2.4">
    <ns1:Asset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns1:Script">
        <ns1:name>MWS2R3 - CM2012 - Primary Prereqs</ns1:name>
        <ns1:id>390</ns1:id>
        <ns1:description>Delay count required as this script follows on from scripts that install Windows Features. Upon reboot Server Manager has to reinitialise.</ns1:description>
        <ns1:uuid>69d77a0d-4027-4219-8ad7-1e4db36c0d37</ns1:uuid>
        <ns1:assetType>
            <ns1:name>script</ns1:name>
            <ns1:href>assettype/2</ns1:href>
            <ns1:id>2</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.AssetType+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:assetType>
        <ns1:top>true</ns1:top>
        <ns1:assetPath>/Root/MWS2R3_SYD</ns1:assetPath>
        <ns1:detailedAssetPath>/Root:#ID#1:#TYPE#VMContainer/MWS2R3_SYD:#ID#8:#TYPE#VMProject</ns1:detailedAssetPath>
        <ns1:lifecycleVersion>-1</ns1:lifecycleVersion>
        <ns1:removable>true</ns1:removable>
        <ns1:domain>
            <ns1:name>domain1</ns1:name>
            <ns1:href>domain/1</ns1:href>
            <ns1:id>1</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Domain+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:domain>
        <ns1:creator>
            <ns1:name>dridley</ns1:name>
            <ns1:href>user/12</ns1:href>
            <ns1:id>12</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:creator>
        <ns1:created>2015-07-03T12:31:11+10:00</ns1:created>
        <ns1:lockType>0</ns1:lockType>
        <ns1:lastModified>2015-07-03T12:32:41+10:00</ns1:lastModified>
        <ns1:parent>
            <ns1:name>MWS2R3_SYD</ns1:name>
            <ns1:href>project/8</ns1:href>
            <ns1:id>8</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Project+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:parent>
        <ns1:slot>5cfef39d-fa59-4b8f-b28b-917fc154a46e</ns1:slot>
        <ns1:version>3</ns1:version>
        <ns1:latest>false</ns1:latest>
        <ns1:publishComment>Changed WSUS commands</ns1:publishComment>
        <ns1:slotId>184</ns1:slotId>
        <ns1:publisher>
            <ns1:name>dridley</ns1:name>
            <ns1:href>user/12</ns1:href>
            <ns1:id>12</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:publisher>
        <ns1:versionStatus>active</ns1:versionStatus>
        <ns1:checkoutAllowed>false</ns1:checkoutAllowed>
        <ns1:headAllowed>false</ns1:headAllowed>
        <ns1:operatingSystem>Windows</ns1:operatingSystem>
        <ns1:enableExtensions>false</ns1:enableExtensions>
        <ns1:body># Load Common functions
. .\Logging.ps1
. .\GlobalRepository.ps1
. .\LaunchProcess.ps1
. .\FilesUtility.ps1
. .\PlatformUtils.ps1

# get current script location
$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition
$scriptName = $MyInvocation.MyCommand.Name
 
ConfigureLogging $scriptPath $scriptName
 
#########################################################################
# Main (Primary Server only)
#########################################################################

#Use ArgList variable in Start-Process commands so embedded variables and env variables resolve
#START.exe is used with msiexec otherwise it does not wait

$DomainFQDN =			(get-globalvariable(&quot;Global\DomainFQDN&quot;)).value
$DomainNetBIOS = 		(get-globalvariable(&quot;Global\DomainNetBIOS&quot;)).value
$DomainDN = 			(get-globalvariable(&quot;AD\DistinguishedName&quot;)).value
$ServiceAccountName = 	&quot;$DomainNetBIOS\$env:CM_ServiceAccount&quot;
$ServiceAccountPwd = 	get-serviceAccountPassword -username $env:CM_ServiceAccount.ToLower()					# Covert to lowercase as get-serviceAccountPassword function is case sensitive
$SQLServerName = 		get-computername -ComponentID $env:SQL_ComponentID -InstanceID $env:SQL_InstanceID
$PShEXE = 				&quot;$PSHome\Powershell.exe&quot;


If ($DomainFQDN -eq $NULL) 			{Write-Host 'ERROR: $DomainFQDN not defined'; EXIT 1}
If ($DomainNetBIOS -eq $NULL) 		{Write-Host 'ERROR: $DomainNetBIOS not defined'; EXIT 1}
If ($DomainDN -eq $NULL) 			{Write-Host 'ERROR: $DomainDN not defined'; EXIT 1}
If ($ServiceAccountName -eq $NULL) 	{Write-Host 'ERROR: $ServiceAccountName not defined'; EXIT 1}
If ($ServiceAccountPwd -eq $NULL) 	{Write-Host 'ERROR: $ServiceAccountPwd not defined'; EXIT 1}
If ($SQLServerName -eq $NULL)	 	{Write-Host 'ERROR: $SQLServerName not defined'; EXIT 1}


Log &quot;**** Starting: Primary Pre-Reqs Config... ****&quot;
Log &quot;`n&quot;


Log &quot;Copy required content locally&quot;		# Will be copied to C:\Users\&lt;profile&gt;
Get-AppFiles &quot;PC Devices\Misc\SQL Server\SQL Server 2012 Exp x64 SP2&quot;
If (!(Test-Path &quot;F:\ConfigMgr&quot;)) {Get-AppFiles &quot;PC Devices\System Center\Ops Repository&quot;}
Log &quot;`n&quot;


Log &quot;Check AD Group membership prereq...&quot;
$arglist = &quot;-Command `&quot;&amp; { If (!(Get-ADComputer $env:Computername -Properties MemberOf | Select -Expand Memberof | Select-String -Pattern 'ROLE-SCCM-Servers')) { EXIT 1} }`&quot;&quot;
$ret = LaunchProcessAsUser &quot;$PShEXE&quot; $arglist $ServiceAccountName $ServiceAccountPwd
If ($ret -ne 0 -And $ret -ne 3010) {Log &quot;ERROR: $ret - $env:computername is NOT a member of $DomainNetBIOS\ROLE-SCCM-Servers. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;


Log &quot;ADK for Windows 8.1...&quot;
$arglist = &quot;/features OptionID.DeploymentTools OptionID.WindowsPreinstallationEnvironment OptionID.UserStateMigrationTool /installpath C:\WindowsKits\8.1 /quiet /norestart /ceip off /log $env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-ADK.log&quot;
$ret = Start-Process -NoNewWindow -Wait -PassThru -FilePath &quot;$ScriptPath\ConfigMgr\ADK for Win8.1\adksetup.exe&quot; -ArgumentList $arglist
If ($ret.exitcode -ne 0 -And $ret.exitcode -ne 3010) {Log &quot;ERROR: $ret - Failed to install ADK. Exiting...&quot;; EXIT 1}
Start-Sleep -Seconds 300
Log &quot;`n&quot;


Log &quot;Report Viewer 2012...&quot;		#Used for launching reports from CM2012 console
Log &quot;    **Running CLR Types**&quot;
CMD /c Start /WAIT msiexec /i &quot;$ScriptPath\ConfigMgr\Microsoft Report Viewer\Microsoft Report Viewer 2012\SQLSysClrTypes.msi&quot; /qn /norestart /log $env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-ReportViewer_SQLSysClrTypes.log
If ($LastExitCode -ne 0 -And $LastExitCode -ne 3010) {Log &quot;ERROR: $LastExitCode Failed to install Report Viewer CLR Types. Exiting...&quot;; EXIT 1}
Start-Sleep -Seconds 30
Log &quot;    **Running Report Viewer MSI**&quot;
CMD /c Start /WAIT msiexec /i &quot;$ScriptPath\ConfigMgr\Microsoft Report Viewer\Microsoft Report Viewer 2012\ReportViewer.msi&quot; /qn /norestart /log $env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-ReportViewer_MSI.log
If ($LastExitCode -ne 0 -And $LastExitCode -ne 3010) {Log &quot;ERROR: $LastExitCode Failed to install Report Viewer 2012 MSI. Exiting...&quot;; EXIT 1}
Start-Sleep -Seconds 30
Log &quot;`n&quot;


Log &quot;Microsoft SQL Server 2012 Report Builder...&quot;
CMD /c Start /WAIT msiexec /i &quot;$ScriptPath\ConfigMgr\Microsoft SQL Server Report Builder\Microsoft SQL Server 2012 Report Builder\ReportBuilder3.msi&quot; /qn /norestart /log $env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-ReportBuilder3.log
If ($LastExitCode -ne 0 -And $LastExitCode -ne 3010) {Log &quot;ERROR: $LastExitCode Failed to install Microsoft SQL Server 2012 Report Builder. Exiting...&quot;; EXIT 1}
Start-Sleep -Seconds 30
Log &quot;`n&quot;

Log &quot;Windows 2012 Roles (WSUS)...&quot;
$Feature = Install-WindowsFeature -Name UpdateServices-Services,UpdateServices-DB -IncludeManagementTools -LogPath &quot;$env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-Roles_WSUS.log&quot;
If (!($Feature.Success)) {Log &quot;ERROR: Failed to install WSUS Role. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;
Start-Sleep -s 120


Log &quot;Configure WSUS... (log file located under %windir%\Temp\tmpXXXX.tmp)&quot;
$arglist = &quot;postinstall SQL_INSTANCE_NAME=$SQLServerName\$env:SQL_InstanceName CONTENT_DIR=F:\WSUS&quot;			# WSUS hosted on SQL box
$ret = LaunchProcessAsUser &quot;C:\Program Files\Update Services\Tools\wsusutil.exe&quot; $arglist $ServiceAccountName $ServiceAccountPwd
If ($ret -ne 0 -And $ret -ne 3010) {Log &quot;ERROR: $ret - WSUS config failed&quot;; EXIT 1}
Log &quot;`n&quot;
Start-Sleep -s 300

Log &quot;    **WSUS is using the following DB:&quot;
reg query &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Update Services\Server\Setup&quot; /v SqlServerName
Log &quot;`n&quot;


Log &quot;Installing SCUP 2011...&quot;
CMD /c Start /WAIT MSIEXEC.exe /i &quot;$ScriptPath\ConfigMgr\Microsoft SCUP 2011\SystemCenterUpdatesPublisher.msi&quot; /qn /norestart /log $env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-SCUP.log
If ($LastExitCode -ne 0 -And $LastExitCode -ne 3010) {Log &quot;ERROR: $LastExitCode Failed to install Microsoft SCUP 2011. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;

Log &quot;Installing MDT 2013 v6.2.5019.0...&quot;
CMD /c Start /WAIT MSIEXEC.exe /i &quot;$ScriptPath\ConfigMgr\MDT\MDT 2013 v6.2.5019.0\MicrosoftDeploymentToolkit2013_x64.msi&quot; /qn /norestart /log $env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-MDT.log
If ($LastExitCode -ne 0 -And $LastExitCode -ne 3010) {Log &quot;ERROR: $LastExitCode Failed to install MDT 2013. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;


Log &quot;Installing SQL Server 2012 Express SP2 - Management Studio ...&quot;		# Log files located in &quot;C:\Program Files\Microsoft SQL Server\110\Setup Bootstrap\Log&quot;
$CMDfile = &quot;$ScriptPath\SQLManagementStudio_x64_ENU\_MS SQL 2012 Exp SP2 x64_MgtStudioOnly.cmd&quot;
(Get-Content $CMDfile) | ForEach-Object { $_ -replace &quot;Set SQLSYSADMINACCOUNTS=.*&quot; , &quot;Set SQLSYSADMINACCOUNTS=`&quot;NT AUTHORITY\System`&quot; `&quot;$DomainNetBIOS\PERM-L-SCCM-SQLAdmins`&quot; `&quot;$ServiceAccountName`&quot;&quot; } | Set-Content $CMDfile
$arglist = &quot;/c `&quot;$CMDfile`&quot;&quot;
$ret = LaunchProcessAsUser &quot;$env:COMSPEC&quot; $arglist $ServiceAccountName $ServiceAccountPwd
If ($ret -ne 0 -And $ret -ne 3010) {Log &quot;ERROR: $ret - Failed to install SQL Server 2012 Express SP2 - Management Studio&quot;; EXIT 1}
Log &quot;`n&quot;
Start-Sleep -s 120


Log &quot;	** Configuring SQL server OS and Database Delegation&quot;				# Needs to be run after SQL Server is installed so that 'SQL-Permissions' function can work
$SQLServerName = (get-computername -ComponentID $env:SQL_ComponentID -InstanceID $env:SQL_InstanceID).ToUpper()
$PS1File = &quot;$ScriptPath\ConfigMgr\Scripts\SQL-Server Config.ps1&quot;
# Add commands to PS1File
(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;ScriptPath =.*&quot; , &quot;ScriptPath = `&quot;$ScriptPath`&quot;&quot; }					| Set-Content $PS1File
(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;SQLServerName =.*&quot; , &quot;SQLServerName = `&quot;$SQLServerName`&quot;&quot; }			| Set-Content $PS1File
(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;DomainFQDN =.*&quot; , &quot;DomainFQDN = `&quot;$DomainFQDN`&quot;&quot; }					| Set-Content $PS1File
(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;DomainNetBIOS =.*&quot; , &quot;DomainNetBIOS = `&quot;$DomainNetBIOS`&quot;&quot; }			| Set-Content $PS1File
    
# Run PS1 file using svc account credentials
$ArgList = &quot;-file `&quot;$PS1File`&quot;&quot;
$ret = LaunchProcessAsUser &quot;$PShEXE&quot; $ArgList $ServiceAccountName $ServiceAccountPwd		# Needs to run %COMSPEC% as Powershell.exe was not found and is looking for absolute path
If ($ret -ne 0 -And $ret -ne 3010) {Log &quot;ERROR: $ret - SQL delegation failed&quot;; EXIT 1}
Log &quot;`n&quot;

Log &quot;Create Source Repository to house content...&quot;
If (!(Test-Path &quot;F:\ConfigMgr&quot;))
{
	$tmp = robocopy &quot;$ScriptPath\ConfigMgr_Share&quot; &quot;F:\ConfigMgr&quot; /move /s /e /r:5 /w:10 /np /njh
    Log &quot;INFO: Exitcode $LastExitCode - Creating Source Repository&quot;							# Robocopy exitcodes less that 7 are considered non-fatal.
}
Else
{
	Log &quot;F:\ConfigMgr already exists. Please update manually if still required.&quot;
}


Log &quot;**** Finished: Primary Pre-Reqs Config... ****&quot;</ns1:body>
        <ns1:type>Guest</ns1:type>
        <ns1:language>
            <ns1:name>powershell</ns1:name>
            <ns1:href>scriptlanguage/5</ns1:href>
            <ns1:id>5</ns1:id>
            <ns1:rel>down</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.ScriptLanguage+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:language>
        <ns1:runAsAdmin>false</ns1:runAsAdmin>
        <ns1:timeout>3600</ns1:timeout>
        <ns1:retries>0</ns1:retries>
        <ns1:delay>300</ns1:delay>
        <ns1:errorAction>Abort</ns1:errorAction>
        <ns1:rebootRequired>true</ns1:rebootRequired>
        <ns1:runOnProvisionOnly>false</ns1:runOnProvisionOnly>
    </ns1:Asset>
</ns1:Envelope>
