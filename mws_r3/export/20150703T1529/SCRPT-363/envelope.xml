<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns1:Envelope xmlns:ns1="http://servicemesh.com/agility/api" xmlns:ns2="http://servicemesh.com/core/messaging" ns1:version="3.0" ns1:productVersion="9.2.4">
    <ns1:Asset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns1:Script">
        <ns1:name>MWS2R3 - CM2012 - Primary Install</ns1:name>
        <ns1:id>373</ns1:id>
        <ns1:description></ns1:description>
        <ns1:uuid>43e82a13-db77-4521-abd2-9c5ec7a24174</ns1:uuid>
        <ns1:assetType>
            <ns1:name>script</ns1:name>
            <ns1:href>assettype/2</ns1:href>
            <ns1:id>2</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.AssetType+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:assetType>
        <ns1:top>true</ns1:top>
        <ns1:assetPath>/Root/MWS2R3_SYD</ns1:assetPath>
        <ns1:detailedAssetPath>/Root:#ID#1:#TYPE#VMContainer/MWS2R3_SYD:#ID#8:#TYPE#VMProject</ns1:detailedAssetPath>
        <ns1:lifecycleVersion>-1</ns1:lifecycleVersion>
        <ns1:removable>true</ns1:removable>
        <ns1:domain>
            <ns1:name>domain1</ns1:name>
            <ns1:href>domain/1</ns1:href>
            <ns1:id>1</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Domain+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:domain>
        <ns1:creator>
            <ns1:name>dridley</ns1:name>
            <ns1:href>user/12</ns1:href>
            <ns1:id>12</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:creator>
        <ns1:created>2015-06-22T17:22:35+10:00</ns1:created>
        <ns1:lockType>0</ns1:lockType>
        <ns1:lastModified>2015-06-22T17:27:38+10:00</ns1:lastModified>
        <ns1:parent>
            <ns1:name>MWS2R3_SYD</ns1:name>
            <ns1:href>project/8</ns1:href>
            <ns1:id>8</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Project+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:parent>
        <ns1:slot>14d7f990-5bd4-4c30-961f-a4402c4a1e23</ns1:slot>
        <ns1:version>2</ns1:version>
        <ns1:latest>false</ns1:latest>
        <ns1:publishComment></ns1:publishComment>
        <ns1:slotId>187</ns1:slotId>
        <ns1:publisher>
            <ns1:name>dridley</ns1:name>
            <ns1:href>user/12</ns1:href>
            <ns1:id>12</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:publisher>
        <ns1:versionStatus>active</ns1:versionStatus>
        <ns1:checkoutAllowed>false</ns1:checkoutAllowed>
        <ns1:headAllowed>false</ns1:headAllowed>
        <ns1:operatingSystem>Windows</ns1:operatingSystem>
        <ns1:enableExtensions>false</ns1:enableExtensions>
        <ns1:body># Load Common functions
. .\Logging.ps1
. .\GlobalRepository.ps1
. .\LaunchProcess.ps1
. .\FilesUtility.ps1
. .\PlatformUtils.ps1


# get current script location
$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition
$scriptName = $MyInvocation.MyCommand.Name
 
ConfigureLogging $scriptPath $scriptName
 
#########################################################################
# Main
#########################################################################

#Use ArgList variable in Start-Process commands so embedded variables and env variables resolve
#START.exe is used with msiexec otherwise it does not wait

$DomainFQDN =			(get-globalvariable(&quot;Global\DomainFQDN&quot;)).value
$DomainNetBIOS = 		(get-globalvariable(&quot;Global\DomainNetBIOS&quot;)).value
$ServiceAccountName = 	&quot;$DomainNetBIOS\$env:CM_ServiceAccount&quot;
$ServiceAccountPwd = 	get-serviceAccountPassword -username $env:CM_ServiceAccount.ToLower()		#Covert to lowercase as get-serviceAccountPassword function is case sensitive
$SQLServerName = 		(get-computername -ComponentID $env:SQL_ComponentID -InstanceID $env:SQL_InstanceID).ToUpper()
$ComputerName =			$env:ComputerName.ToUpper()
$PShEXE = 				&quot;$PSHome\Powershell.exe&quot;


If ($DomainFQDN -eq $NULL) 			{Write-Host 'ERROR: $DomainFQDN not defined'; EXIT 1}
If ($DomainNetBIOS -eq $NULL) 		{Write-Host 'ERROR: $DomainNetBIOS not defined'; EXIT 1}
If ($ServiceAccountName -eq $NULL) 	{Write-Host 'ERROR: $ServiceAccountName not defined'; EXIT 1}
If ($ServiceAccountPwd -eq $NULL) 	{Write-Host 'ERROR: $ServiceAccountPwd not defined'; EXIT 1}
If ($SQLServerName -eq $NULL) 		{Write-Host 'ERROR: $SQLServerName not defined'; EXIT 1}


Log &quot;**** Starting: Primary Install... ****&quot;
Log &quot;`n&quot;


Log &quot;Start Scheduled Task to monitor SQL Cluster services...&quot;		# Will restart the services if stopped by CM2012. A known issue when installing certificates on each node, where the services are not restarted
$arglist = &quot;/c SCHTASKS.exe /Run /S `&quot;$env:SQL_ActiveNode`&quot; /TN `&quot;Monitor SQL Cluster`&quot; /I&quot;
$ret = LaunchProcessAsUser &quot;$env:ComSpec&quot; $arglist $ServiceAccountName $ServiceAccountPwd
If ($ret -ne 0) {Log &quot;ERROR: $ret - Could not run remote Scheduled Task on $env:SQL_ActiveNode&quot;; EXIT 1}
Log &quot;`n&quot;


Log &quot;Update ConfigMgr 2012 Primary Unattend file...&quot;
$INIFile = &quot;$env:windir\Debug\ConfigMgr2012\$env:Computername\Unattend_$env:Computername.ini&quot;
Copy-Item &quot;$ScriptPath\ConfigMgr\Scripts\Unattend_Template_PRI.ini&quot; $INIFile -Force
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;SiteCode=.*&quot; , 			&quot;SiteCode=$env:CM_SiteCode&quot; } 								| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;SiteName=.*&quot; , 			&quot;SiteName=$env:CM_SiteDescription&quot; } 						| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;SMSInstallDir=.*&quot; , 		&quot;SMSInstallDir=$env:CM_SMSInstallDir&quot; } 					| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;SDKServer=.*&quot; , 			&quot;SDKServer=$ComputerName.$DomainFQDN&quot; } 					| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;PrerequisitePath=.*&quot; ,	&quot;PrerequisitePath=$ScriptPath\ConfigMgr\ConfigMgr 2012\ConfigMgr 2012 R2_Prereqs&quot; }	| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;ManagementPoint=.*&quot; , 	&quot;ManagementPoint=$ComputerName.$DomainFQDN&quot; } 				| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;DistributionPoint=.*&quot; , 	&quot;DistributionPoint=$ComputerName.$DomainFQDN&quot; } 			| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;SQLServerName=.*&quot; , 		&quot;SQLServerName=$SQLServerName.$DomainFQDN&quot; } 				| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;DatabaseName=.*&quot; , 		&quot;DatabaseName=$env:SQL_InstanceName\CM_$env:CM_SiteCode&quot; }	| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;SQLDataFilePath=.*&quot; , 	&quot;SQLDataFilePath=$env:SQL_DataFilePath&quot; } 					| Set-Content $INIFile
(Get-Content $INIFile) | ForEach-Object { $_ -replace &quot;SQLLogFilePath=.*&quot; , 	&quot;SQLLogFilePath=$env:SQL_LogFilePath&quot; } 					| Set-Content $INIFile


Log &quot;Installing ConfigMgr 2012 Primary...&quot;
$arglist = &quot;/Script $INIFile /NoUserInput&quot;
$ret = LaunchProcessAsUser &quot;$ScriptPath\ConfigMgr\ConfigMgr 2012\ConfigMgr 2012 R2 5.00.7958.1000\SMSSETUP\BIN\X64\setup.exe&quot; $arglist $ServiceAccountName $ServiceAccountPwd
If ($ret -ne 0 -And $ret -ne 3010) {Log &quot;ERROR: $ret - ConfigMgr 2012 install failed&quot;; EXIT 1}
Log &quot;`n&quot;
Start-Sleep -s 300


# Verify ConfigMgr is installed
If (!(Test-Path &quot;HKLM:\SOFTWARE\Microsoft\SMS\Components\SMS_EXECUTIVE&quot;)) {Write-Host 'ERROR: ConfigMgr install not detected!'; EXIT 1}


Log &quot;Delete Scheduled Task to monitor SQL Cluster services...&quot;
$arglist = &quot;/c SCHTASKS.exe /Delete /S `&quot;$env:SQL_ActiveNode`&quot; /TN `&quot;Monitor SQL Cluster`&quot; /F&quot;
$ret = LaunchProcessAsUser &quot;$env:ComSpec&quot; $arglist $ServiceAccountName $ServiceAccountPwd
If ($ret -ne 0) {Log &quot;ERROR: $ret - Could not delete remote Scheduled Task&quot;; EXIT 1}
Log &quot;`n&quot;


Log &quot;Installing POST ConfigMgr 2012 Updates...&quot;
Log &quot;    **KB3054451  |  CU5 for ConfigMgr 2012 R2&quot;		# Log file output to %windir%\Temp
$arglist = &quot;/Unattended /NoSQLTimeout /NoMOFTimeout&quot;
$ret = LaunchProcessAsUser &quot;$ScriptPath\ConfigMgr\Updates\ConfigMgr 2012\CU5 for ConfigMgr 2012 R2\CM12-R2CU5-KB3054451-X64-ENU.exe&quot; $arglist $ServiceAccountName $ServiceAccountPwd
If ($ret -ne 0 -And $ret -ne 3010 -And $ret -ne 3001) {Log &quot;ERROR: $ret - ConfigMgr 2012 install failed&quot;; EXIT 1}
Log &quot;`n&quot;
Start-Sleep -s 300


Log &quot;**** Finished: Primary Install... ****&quot;</ns1:body>
        <ns1:type>Guest</ns1:type>
        <ns1:language>
            <ns1:name>powershell</ns1:name>
            <ns1:href>scriptlanguage/5</ns1:href>
            <ns1:id>5</ns1:id>
            <ns1:rel>down</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.ScriptLanguage+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:language>
        <ns1:runAsAdmin>false</ns1:runAsAdmin>
        <ns1:timeout>5400</ns1:timeout>
        <ns1:retries>0</ns1:retries>
        <ns1:delay>300</ns1:delay>
        <ns1:errorAction>Abort</ns1:errorAction>
        <ns1:rebootRequired>true</ns1:rebootRequired>
        <ns1:runOnProvisionOnly>false</ns1:runOnProvisionOnly>
    </ns1:Asset>
</ns1:Envelope>
