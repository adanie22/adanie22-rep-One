<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns1:Envelope xmlns:ns1="http://servicemesh.com/agility/api" xmlns:ns2="http://servicemesh.com/core/messaging" ns1:version="3.0" ns1:productVersion="9.2.4">
    <ns1:Asset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns1:Script">
        <ns1:name>MWS2R3 - CM2012 - Prereqs Common</ns1:name>
        <ns1:id>229</ns1:id>
        <ns1:description>Reboots after running</ns1:description>
        <ns1:uuid>cd1df164-cd69-44f4-a95d-5d6c7203f37b</ns1:uuid>
        <ns1:assetType>
            <ns1:name>script</ns1:name>
            <ns1:href>assettype/2</ns1:href>
            <ns1:id>2</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.AssetType+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:assetType>
        <ns1:top>true</ns1:top>
        <ns1:assetPath>/Root/MWS2R3_SYD</ns1:assetPath>
        <ns1:detailedAssetPath>/Root:#ID#1:#TYPE#VMContainer/MWS2R3_SYD:#ID#8:#TYPE#VMProject</ns1:detailedAssetPath>
        <ns1:lifecycleVersion>-1</ns1:lifecycleVersion>
        <ns1:removable>true</ns1:removable>
        <ns1:domain>
            <ns1:name>domain1</ns1:name>
            <ns1:href>domain/1</ns1:href>
            <ns1:id>1</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Domain+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:domain>
        <ns1:creator>
            <ns1:name>dhatchett2</ns1:name>
            <ns1:href>user/8</ns1:href>
            <ns1:id>8</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:creator>
        <ns1:created>2015-05-26T22:46:42+10:00</ns1:created>
        <ns1:lockType>0</ns1:lockType>
        <ns1:lastModified>2015-06-12T20:42:32+10:00</ns1:lastModified>
        <ns1:parent>
            <ns1:name>MWS2R3_SYD</ns1:name>
            <ns1:href>project/8</ns1:href>
            <ns1:id>8</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Project+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:parent>
        <ns1:slot>b7183694-3aa8-48bd-9887-4ee0afe71f74</ns1:slot>
        <ns1:version>1</ns1:version>
        <ns1:latest>false</ns1:latest>
        <ns1:publishComment></ns1:publishComment>
        <ns1:slotId>191</ns1:slotId>
        <ns1:publisher>
            <ns1:name>dridley</ns1:name>
            <ns1:href>user/12</ns1:href>
            <ns1:id>12</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:publisher>
        <ns1:versionStatus>versioned</ns1:versionStatus>
        <ns1:checkoutAllowed>true</ns1:checkoutAllowed>
        <ns1:headAllowed>true</ns1:headAllowed>
        <ns1:operatingSystem>Windows</ns1:operatingSystem>
        <ns1:enableExtensions>false</ns1:enableExtensions>
        <ns1:body># Load Common functions
. .\Logging.ps1
. .\GlobalRepository.ps1
. .\LaunchProcess.ps1
. .\FilesUtility.ps1
. .\PlatformUtils.ps1
. .\UsersUtility.ps1


# get current script location
$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition
$scriptName = $MyInvocation.MyCommand.Name
 
ConfigureLogging $scriptPath $scriptName
 
#########################################################################
# Main
#########################################################################
 
#Use ArgList variable in Start-Process commands so embedded variables and env variables resolve
#START.exe is used with msiexec otherwise it does not wait

$DomainFQDN =			(get-globalvariable(&quot;Global\DomainFQDN&quot;)).value
$DomainNetBIOS = 		(get-globalvariable(&quot;Global\DomainNetBIOS&quot;)).value
$DomainDN = 			(get-globalvariable(&quot;AD\DistinguishedName&quot;)).value
$ServiceAccountName = 	&quot;$DomainNetBIOS\$CM_SERVICEACCOUNT&quot;										# Svc account not set as a local env variable yet so need to reference BluePrint variable
$ServiceAccountPwd = 	get-serviceAccountPassword -username $CM_SERVICEACCOUNT.ToLower()		# Covert to lowercase as get-serviceAccountPassword function is case sensitive
$ADPermissionsDN = 		&quot;OU=Permissions,OU=Administration,$DomainDN&quot;
$ADRolesDN = 			&quot;OU=Roles,OU=Administration,$DomainDN&quot;
$PShEXE = 					&quot;$PSHome\Powershell.exe&quot;

If ($DomainFQDN -eq $NULL) 			{Write-Host 'ERROR: $DomainFQDN not defined'; EXIT 1}
If ($DomainNetBIOS -eq $NULL) 		{Write-Host 'ERROR: $DomainNetBIOS not defined'; EXIT 1}
If ($DomainDN -eq $NULL) 			{Write-Host 'ERROR: $DomainDN not defined'; EXIT 1}
If ($ServiceAccountName -eq $NULL) 	{Write-Host 'ERROR: $ServiceAccountName not defined'; EXIT 1}
If ($ServiceAccountPwd -eq $NULL) 	{Write-Host 'ERROR: $ServiceAccountPwd not defined'; EXIT 1}


Log &quot;**** Starting: Common Pre-Reqs Config... ****&quot;
Log &quot;`n&quot;


Log &quot;Copy required content locally...&quot;		# Will be copied to C:\Users\&lt;profile&gt;
Get-AppFiles &quot;PC Devices\System Center\Server Provisioning\Common&quot;
Get-AppFiles &quot;PC Devices\Misc\Microsoft .NET&quot;
Get-AppFiles &quot;PC Devices\Misc\Windows Features&quot;
If ($env:CM_SITECODE) {Get-AppFiles &quot;PC Devices\System Center\Server Provisioning\Primary&quot;}
Log &quot;`n&quot;


Log &quot;Set Common Environment Variables...&quot;
SETX CM_ServiceAccount $CM_SERVICEACCOUNT /M
Log &quot;`n&quot;


Log &quot;Set Timezone...&quot;
tzutil /s &quot;$OS_TIMEZONE&quot;
If ($LastExitCode -ne 0) {Log &quot;ERROR: Timezone could not be set. Possibly due to inability to enumerate variables.&quot;; EXIT 1}
Log &quot;`n&quot;


Log &quot;Copy CMTrace.exe... &quot;
If (!(Test-Path &quot;$env:ProgramFiles\CMTrace&quot;)) {MD &quot;$env:ProgramFiles\CMTrace&quot;}
Copy-Item &quot;$ScriptPath\ConfigMgr\CMTrace\CMTrace.exe&quot; &quot;$env:ProgramFiles\CMTrace\&quot; -Force
Log &quot;`n&quot;


Log &quot;Defining Windows Firewall Ports...&quot;
Start-Process -NoNewWindow -Wait -PassThru -FilePath &quot;$ScriptPath\ConfigMgr\Scripts\Windows Firewall\CM2012-Windows Firewall.cmd&quot;
Log &quot;`n&quot;


# Install Windows Roles and Features
Log &quot;Installing Windows 2012 Roles (.NET 3.5 - includes .NET 2.0 and 3.0)...&quot;			# .NET 4.0 is already included in the Server SOE
Log &quot;    **KB2966828  |  .NET 3.5 prereq on Win2012 as per KB3005628&quot;
CMD /c Start /WAIT WUSA.exe &quot;$ScriptPath\WindowsFeatures_Prereq\Windows8.1-KB2966828-x64.msu&quot; /quiet /norestart /log:&quot;$env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-KB3005628.log&quot;
Log &quot;    **.NET 3.5&quot;
$Feature = Install-WindowsFeature -Name NET-Framework-Core -Source &quot;$ScriptPath\WindowsFeatures_Prereq\sxs&quot; -LogPath &quot;$env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-Roles_.NET3.5.log&quot;		# Source switch used for .NET 3.5 only
If (!($Feature.Success)) {Log &quot;ERROR: Failed to install Windows Roles and Features. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;

Log &quot;Installing Windows 2012 Roles (IIS)...&quot;
$Feature = Install-WindowsFeature -Name Web-Default-Doc,Web-Dir-Browsing,Web-Http-Errors,Web-Static-Content,Web-Http-Redirect,Web-Health,Web-Performance,Web-Filtering,Web-Basic-Auth,Web-IP-Security,Web-Url-Auth,Web-Windows-Auth,Web-Net-Ext,Web-Net-Ext45,Web-ASP,Web-ASP-Net,Web-ASP-Net45,Web-ISAPI-Ext,Web-ISAPI-Filter,Web-Mgmt-Console,Web-Metabase,Web-Lgcy-Scripting,Web-WMI,Web-Scripting-Tools,Web-Mgmt-Service -LogPath &quot;$env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-Roles_IIS.log&quot;
If (!($Feature.Success)) {Log &quot;ERROR: Failed to install Windows Roles and Features. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;

Log &quot;Installing Windows 2012 Roles (WDS)...&quot;
$Feature = Install-WindowsFeature -Name WDS -LogPath &quot;$env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-Roles_WDS.log&quot;
If (!($Feature.Success)) {Log &quot;ERROR: Failed to install Windows Roles and Features. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;

Log &quot;Installing Windows 2012 Features (BITS, BranchCache, GPMC, RDC, AD Psh Modules, AD Tools, Share &amp; Storage Mgt, File Resource Mgr)...&quot;
$Feature = Install-WindowsFeature -Name BITS-IIS-Ext,RSAT-Bits-Server,BranchCache,GPMC,RDC,RSAT-AD-PowerShell,RSAT-ADDS-Tools,RSAT-ADLDS,RSAT-CoreFile-Mgmt,FS-Resource-Manager -LogPath &quot;$env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-Features.log&quot;
If (!($Feature.Success)) {Log &quot;ERROR: Failed to install Windows Roles and Features. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;
Start-Sleep -Seconds 30


Log &quot;Define local admins...&quot;		# Does not require domain credentials to run
# Note: svc account needs to be local admin prior to calling any LaunchProcessAsUser function, as it needs logon as a batch job rights
AddUserToLocalAdministrators -ServerName &quot;$env:Computername&quot; -UserName &quot;$ServiceAccountName&quot;
If (!(net LocalGroup Administrators | Select-String -Pattern $CM_SERVICEACCOUNT)) {&quot;ERROR: $ServiceAccountName could not be added to local admins&quot;; EXIT 1}			# Validate local admin

net user /add PCDevices_Admin PCdevices@dmin											# Create local account
AddUserToLocalAdministrators -ServerName &quot;$env:Computername&quot; -UserName &quot;$env:Computername\PCDevices_Admin&quot;
Log &quot;`n&quot;


If ($env:CM_SITECODE)							# If Primary server is being stood up, then create AD objects. Needs to be done in this script as it's a prereq to subsequent AD group membership tasks
{
    Log &quot;Current server is detected as a Primary server...&quot;
    Log &quot;    ** Copy required Primary content locally...&quot;				# Will be copied to C:\Users\&lt;profile&gt;
            
    Log &quot;    ** Creating AD Objects&quot;
    # Modify PS1 file
    $PS1File = &quot;$ScriptPath\ConfigMgr\Scripts\CM2012-AD Object-Creation.ps1&quot;
	(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;DomainNetBIOS =.*&quot; ,		&quot;DomainNetBIOS = `&quot;$DomainNetBIOS`&quot;&quot; }		| Set-Content $PS1File
    (Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;DomainDN =.*&quot; ,			&quot;DomainDN = `&quot;$DomainDN`&quot;&quot; }				| Set-Content $PS1File
	(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;ADPermissionsDN =.*&quot; ,	&quot;ADPermissionsDN = `&quot;$ADPermissionsDN`&quot;&quot; }	| Set-Content $PS1File
	(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;ADRolesDN =.*&quot; ,			&quot;ADRolesDN = `&quot;$ADRolesDN`&quot;&quot; }				| Set-Content $PS1File

	# Run PS1 file using svc account credentials
	$ArgList = &quot;-file `&quot;$PS1File`&quot;&quot;
	$ret = LaunchProcessAsUser &quot;$PShEXE&quot; $ArgList $ServiceAccountName $ServiceAccountPwd		# Needs to run %COMSPEC% as Powershell.exe was not found and is looking for absolute path
    If ($ret -ne 0 -And $ret -ne 3010) {Log &quot;ERROR: Exitcode = $ret. Failed to create AD objects. Exiting...&quot;; EXIT 1}
    Log &quot;`n&quot;
   
}
Else
{
	Log &quot;Current server is NOT detected as a Primary server. Assuming AD accounts and groups have already been created. Continuing...&quot;
    Log &quot;`n&quot;
}


Log &quot;Define AD group membership...&quot;
$PS1File = &quot;$ScriptPath\ConfigMgr\Scripts\CM2012-AD Group-Membership.ps1&quot;			# Define AD group membership prereqs. Needs to run under svc account
(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;DomainNetBIOS =.*&quot; ,		&quot;DomainNetBIOS = `&quot;$DomainNetBIOS`&quot;&quot; }		| Set-Content $PS1File
(Get-Content $PS1File) | ForEach-Object { $_ -replace &quot;ADRolesDN =.*&quot; ,			&quot;ADRolesDN = `&quot;$ADRolesDN`&quot;&quot; }				| Set-Content $PS1File
$ArgList = &quot;-file `&quot;$PS1File`&quot;&quot;
$ret = LaunchProcessAsUser &quot;$PShEXE&quot; $ArgList $ServiceAccountName $ServiceAccountPwd		# Needs to run %COMSPEC% as Powershell.exe was not found and is looking for absolute path
If ($ret -ne 0 -And $ret -ne 3010) {Log &quot;ERROR: Exitcode = $ret. Failed to define AD group membership. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;


Log &quot;Define Additional Local Admins...&quot;		# Does not require domain credentials to run
AddUserToLocalAdministrators -ServerName &quot;$env:Computername&quot; -UserName &quot;$DomainNetBIOS\ROLE-SCCM-Servers&quot;
If (!(net LocalGroup Administrators | Select-String -Pattern ROLE-SCCM-Servers)) {&quot;ERROR: ROLE-SCCM-Servers could not be added to local admins&quot;; EXIT 1}			# Validate local admin

AddUserToLocalAdministrators -ServerName &quot;$env:Computername&quot; -UserName &quot;$DomainNetBIOS\DEL-G-CSC Infrastructure Services&quot;
Log &quot;`n&quot;


Log &quot;Installing .NET 4.5.2...&quot;
&lt;#
	# Needs to run as Scheduled Task under local admin (not necessarily under domain account) otherwise access is denied after extracting EXE (not sure why)
    # Therefore, needs to run after svc account is added to local admins
#&gt;
$ArgList = &quot;/q /norestart /log `&quot;$env:windir\Debug\ConfigMgr2012\$env:Computername\$env:computername-.NET4.5.2.log`&quot;&quot;
$ret = LaunchProcessAsUser &quot;$ScriptPath\Microsoft .NET 4.5.2\NDP452-KB2901907-x86-x64-AllOS-ENU.exe&quot; $ArgList $ServiceAccountName $ServiceAccountPwd
If ($ret -ne 0 -And $ret -ne 3010) {Log &quot;ERROR: Exitcode = $ret.exitcode. Failed to install .NET 4.5.2. Exiting...&quot;; EXIT 1}
Log &quot;`n&quot;    


Log &quot;Defining Drive Letters that ConfigMgr can use...&quot;
$disks = gwmi win32_logicaldisk -Filter &quot;DriveType='3'&quot;
ForEach ($id in $disks.DeviceID)
{
	If ($id -ne &quot;F:&quot;) {New-Item $id\NO_SMS_ON_DRIVE.sms -Type file -Force}
}
Log &quot;`n&quot;


Log &quot;Creating IIS Cleanup Task...&quot;
Start-Process -NoNewWindow -Wait -PassThru -FilePath &quot;$ScriptPath\ConfigMgr\Scripts\IIS 8.5\IIS Logs-Cleanup-SchTask.cmd&quot;
Log &quot;`n&quot;


Log &quot;Creating User Profile Cleanup Task...&quot;
$SchTasks_Date = (Get-Date).AddDays(5).ToString(&quot;MM/dd/yyyy&quot;)
$ProfPath = $env:UserProfile
# Create Agility User cleanup script
echo &quot;Get-CimInstance win32_userprofile -Verbose | Where {`$_.LocalPath -eq '$ProfPath'} | Remove-CimInstance -Verbose&quot; &gt; $env:windir\Debug\ConfigMgr2012\Agility-DelProf-$env:USERNAME.ps1
SchTasks /Create /SC &quot;Once&quot; /SD $SchTasks_Date /ST 01:00 /F /RU &quot;SYSTEM&quot; /TN &quot;Agility-DelProf-$env:USERNAME&quot; /TR &quot;Powershell.exe -File '$env:windir\Debug\ConfigMgr2012\Agility-DelProf-$env:USERNAME.ps1'&quot;
Log &quot;`n&quot;

#Log &quot;Register DNS...&quot;
#ipconfig /registerdns
#Log &quot;`n&quot;

Log &quot;**** Finished: Common Pre-Reqs Config... ****&quot;</ns1:body>
        <ns1:type>Guest</ns1:type>
        <ns1:language>
            <ns1:name>powershell</ns1:name>
            <ns1:href>scriptlanguage/5</ns1:href>
            <ns1:id>5</ns1:id>
            <ns1:rel>down</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.ScriptLanguage+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:language>
        <ns1:runAsAdmin>false</ns1:runAsAdmin>
        <ns1:timeout>1800</ns1:timeout>
        <ns1:retries>0</ns1:retries>
        <ns1:delay>0</ns1:delay>
        <ns1:errorAction>Abort</ns1:errorAction>
        <ns1:rebootRequired>true</ns1:rebootRequired>
        <ns1:variable>
            <ns1:name>CM_SERVICEACCOUNT</ns1:name>
            <ns1:id>329</ns1:id>
            <ns1:description>Service Account used to install ConfigMgr</ns1:description>
            <ns1:uuid>fb4d387e-43c2-4258-9427-3d2a57065114</ns1:uuid>
            <ns1:top>false</ns1:top>
            <ns1:assetPath></ns1:assetPath>
            <ns1:detailedAssetPath></ns1:detailedAssetPath>
            <ns1:lifecycleVersion>-1</ns1:lifecycleVersion>
            <ns1:removable>true</ns1:removable>
            <ns1:displayName>CM_SERVICEACCOUNT</ns1:displayName>
            <ns1:readable>true</ns1:readable>
            <ns1:writable>true</ns1:writable>
            <ns1:minRequired>1</ns1:minRequired>
            <ns1:maxAllowed>1</ns1:maxAllowed>
            <ns1:validator/>
            <ns1:defaultValue>
                <ns1:id>4268</ns1:id>
                <ns1:name>CM_SERVICEACCOUNT</ns1:name>
                <ns1:encrypted>false</ns1:encrypted>
                <ns1:overridable>true</ns1:overridable>
                <ns1:propertyType>
                    <ns1:name>string-any</ns1:name>
                    <ns1:href>/propertytype/4</ns1:href>
                    <ns1:id>4</ns1:id>
                    <ns1:rel>up</ns1:rel>
                    <ns1:type>application/com.servicemesh.agility.api.PropertyType+xml</ns1:type>
                    <ns1:position>0</ns1:position>
                </ns1:propertyType>
                <ns1:propertyDefinition xsi:type="ns1:Link">
                    <ns1:name>CM_SERVICEACCOUNT</ns1:name>
                    <ns1:href>/propertydefinition/329</ns1:href>
                    <ns1:id>329</ns1:id>
                    <ns1:rel>up</ns1:rel>
                    <ns1:type>application/com.servicemesh.agility.api.PropertyDefinition+xml</ns1:type>
                    <ns1:position>0</ns1:position>
                </ns1:propertyDefinition>
                <ns1:stringValue>svc_SCCM_Install</ns1:stringValue>
            </ns1:defaultValue>
            <ns1:propertyType>
                <ns1:name>string-any</ns1:name>
                <ns1:href>propertytype/4</ns1:href>
                <ns1:id>4</ns1:id>
                <ns1:type>application/com.servicemesh.agility.api.PropertyType+xml</ns1:type>
            </ns1:propertyType>
            <ns1:assetPropertyLinkId>606ec98d-86a6-4394-91e9-ebd07266448b</ns1:assetPropertyLinkId>
        </ns1:variable>
        <ns1:variable>
            <ns1:name>OS_TIMEZONE</ns1:name>
            <ns1:id>330</ns1:id>
            <ns1:description>Timezone as per &quot;TZUTIL /L&quot;</ns1:description>
            <ns1:uuid>1c576101-066e-47a0-ad4e-2e95943ab774</ns1:uuid>
            <ns1:top>false</ns1:top>
            <ns1:assetPath></ns1:assetPath>
            <ns1:detailedAssetPath></ns1:detailedAssetPath>
            <ns1:lifecycleVersion>-1</ns1:lifecycleVersion>
            <ns1:removable>true</ns1:removable>
            <ns1:displayName>OS_TIMEZONE</ns1:displayName>
            <ns1:readable>true</ns1:readable>
            <ns1:writable>true</ns1:writable>
            <ns1:minRequired>1</ns1:minRequired>
            <ns1:maxAllowed>1</ns1:maxAllowed>
            <ns1:validator/>
            <ns1:defaultValue>
                <ns1:id>4269</ns1:id>
                <ns1:name>OS_TIMEZONE</ns1:name>
                <ns1:encrypted>false</ns1:encrypted>
                <ns1:overridable>true</ns1:overridable>
                <ns1:propertyType>
                    <ns1:name>string-any</ns1:name>
                    <ns1:href>/propertytype/4</ns1:href>
                    <ns1:id>4</ns1:id>
                    <ns1:rel>up</ns1:rel>
                    <ns1:type>application/com.servicemesh.agility.api.PropertyType+xml</ns1:type>
                    <ns1:position>0</ns1:position>
                </ns1:propertyType>
                <ns1:propertyDefinition xsi:type="ns1:Link">
                    <ns1:name>OS_TIMEZONE</ns1:name>
                    <ns1:href>/propertydefinition/330</ns1:href>
                    <ns1:id>330</ns1:id>
                    <ns1:rel>up</ns1:rel>
                    <ns1:type>application/com.servicemesh.agility.api.PropertyDefinition+xml</ns1:type>
                    <ns1:position>0</ns1:position>
                </ns1:propertyDefinition>
                <ns1:stringValue>AUS Eastern Standard Time</ns1:stringValue>
            </ns1:defaultValue>
            <ns1:propertyType>
                <ns1:name>string-any</ns1:name>
                <ns1:href>propertytype/4</ns1:href>
                <ns1:id>4</ns1:id>
                <ns1:type>application/com.servicemesh.agility.api.PropertyType+xml</ns1:type>
            </ns1:propertyType>
            <ns1:assetPropertyLinkId>01cf64cf-3fbf-460f-83a5-ecc7703041bb</ns1:assetPropertyLinkId>
        </ns1:variable>
        <ns1:runOnProvisionOnly>false</ns1:runOnProvisionOnly>
    </ns1:Asset>
</ns1:Envelope>
