<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns1:Envelope xmlns:ns1="http://servicemesh.com/agility/api" xmlns:ns2="http://servicemesh.com/core/messaging" ns1:version="3.0" ns1:productVersion="9.2.4">
    <ns1:Asset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns1:Script">
        <ns1:name>MWS2R2 - CM2012 - POST Config (SEC)</ns1:name>
        <ns1:id>159</ns1:id>
        <ns1:description>Needs to be triggered from SECONDARY server</ns1:description>
        <ns1:uuid>7abe7061-1801-4a04-a865-3ad049f31105</ns1:uuid>
        <ns1:assetType>
            <ns1:name>script</ns1:name>
            <ns1:href>assettype/2</ns1:href>
            <ns1:id>2</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.AssetType+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:assetType>
        <ns1:top>true</ns1:top>
        <ns1:assetPath>/Root/MWS2/MWS2_CDCR2</ns1:assetPath>
        <ns1:detailedAssetPath>/Root:#ID#1:#TYPE#VMContainer/MWS2:#ID#8:#TYPE#VMContainer/MWS2_CDCR2:#ID#9:#TYPE#VMProject</ns1:detailedAssetPath>
        <ns1:lifecycleVersion>-1</ns1:lifecycleVersion>
        <ns1:removable>true</ns1:removable>
        <ns1:domain>
            <ns1:name>domain1</ns1:name>
            <ns1:href>domain/1</ns1:href>
            <ns1:id>1</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Domain+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:domain>
        <ns1:creator>
            <ns1:name>dridley</ns1:name>
            <ns1:href>user/8</ns1:href>
            <ns1:id>8</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.User+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:creator>
        <ns1:created>2015-02-19T19:26:40-06:00</ns1:created>
        <ns1:lockType>0</ns1:lockType>
        <ns1:lastModified>2015-05-17T22:33:03-05:00</ns1:lastModified>
        <ns1:parent>
            <ns1:name>MWS2_CDCR2</ns1:name>
            <ns1:href>project/9</ns1:href>
            <ns1:id>9</ns1:id>
            <ns1:rel>up</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.Project+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:parent>
        <ns1:version>-1</ns1:version>
        <ns1:latest>false</ns1:latest>
        <ns1:versionStatus>inprogress</ns1:versionStatus>
        <ns1:checkoutAllowed>false</ns1:checkoutAllowed>
        <ns1:headAllowed>false</ns1:headAllowed>
        <ns1:operatingSystem>Windows</ns1:operatingSystem>
        <ns1:enableExtensions>false</ns1:enableExtensions>
        <ns1:body># Load Common functions
. .\GlobalRepository.ps1
# Copy Common scripts to local profile
Get-AppFiles &quot;Common&quot;

# Load Common functions
. .\Logging.ps1
. .\LaunchProcess.ps1
. .\FilesUtility.ps1
. .\PlatformUtils.ps1


# get current script location
$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition
$scriptName = $MyInvocation.MyCommand.Name
 
ConfigureLogging $scriptPath $scriptName


#########################################################################
# Main
#########################################################################

#Use ArgList variable in Start-Process commands so embedded variables and env variables resolve

$DomainFQDN =			(get-globalvariable(&quot;Global\DomainFQDN&quot;)).value
$DomainNetBIOS = 		(get-globalvariable(&quot;Global\DomainNetBIOS&quot;)).value
$ServiceAccountName = 	&quot;$DomainNetBIOS\$env:CM_ServiceAccount&quot;
$ServiceAccountPwd = 	get-serviceAccountPassword -username $env:CM_ServiceAccount.ToLower()		# Covert to lowercase as get-serviceAccountPassword function is case sensitive

If ($DomainFQDN -eq $NULL) 			{Write-Host 'ERROR: $DomainFQDN cannot be determined'; EXIT 1}
If ($DomainNetBIOS -eq $NULL) 		{Write-Host 'ERROR: $DomainNetBIOS cannot be determined'; EXIT 1}
If ($ServiceAccountName -eq $NULL) 	{Write-Host 'ERROR: $ServiceAccountName cannot be determined'; EXIT 1}
If ($ServiceAccountPwd -eq $NULL) 	{Write-Host 'ERROR: $ServiceAccountPwd cannot be determined'; EXIT 1}

Get-ScheduledTask | Where-Object {$_.TaskName -eq &quot;AgilityTask&quot;} | Unregister-ScheduledTask -Confirm:$False		#Cleanup existing tasks used by LaunchProcessAsUser function
If (!(Test-Path &quot;HKLM:\SOFTWARE\Microsoft\SMS\Setup&quot;)) {Write-Host 'ERROR: No ConfigMgr installation was detected. Exiting...'; EXIT 1}

Log &quot;**** Starting: Secondary POST Install Config... ****&quot;
Log &quot;`n&quot;


Log &quot;Installing POST ConfigMgr 2012 Updates...&quot;
Get-AppFiles &quot;PC Devices\System Center\Server Provisioning\Common\ConfigMgr\Updates\ConfigMgr 2012\CU5 for ConfigMgr 2012 R2&quot;
$CUfile = &quot;$ScriptPath\CM12-R2CU5-KB3054451-X64-ENU.exe&quot;
Log &quot;    **KB3054451 | CU5 for ConfigMgr 2012 R2&quot;													# Log file output to %windir%\Temp
$arglist = &quot;/Unattended /NoSQLTimeout /NoMOFTimeout&quot;
LaunchProcessAsUser &quot;$CUfile&quot; $arglist $ServiceAccountName $ServiceAccountPwd
Log &quot;`n&quot;


Log &quot;**** Finished:  Secondary POST Install Config... ****&quot;</ns1:body>
        <ns1:type>Guest</ns1:type>
        <ns1:language>
            <ns1:name>powershell</ns1:name>
            <ns1:href>scriptlanguage/5</ns1:href>
            <ns1:id>5</ns1:id>
            <ns1:rel>down</ns1:rel>
            <ns1:type>application/com.servicemesh.agility.api.ScriptLanguage+xml</ns1:type>
            <ns1:position>0</ns1:position>
        </ns1:language>
        <ns1:runAsAdmin>false</ns1:runAsAdmin>
        <ns1:timeout>900</ns1:timeout>
        <ns1:retries>0</ns1:retries>
        <ns1:delay>300</ns1:delay>
        <ns1:errorAction>Abort</ns1:errorAction>
        <ns1:rebootRequired>true</ns1:rebootRequired>
        <ns1:runOnProvisionOnly>false</ns1:runOnProvisionOnly>
    </ns1:Asset>
</ns1:Envelope>
