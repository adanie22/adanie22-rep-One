from lxml import etree as et
x = et.fromstring(open('bp-1431.xml').read())
x
namespaces={'ns1':'http://servicemesh.com/agility/api'}
x.find('.//variable')
x.find('.//variable',namespaces)
x.find('.//ns1:variable',namespaces)
print x.find('.//ns1:variable',namespaces)
quit()
from lxml import etree as et
x = et.fromstring(open('bp-1431.xml').read())
w = open('bp-1431b.xml','wt')
w.write(et.tostring(x,pretty_print=True))
w.close()
quit()
from lxml import etree as et
x = et.fromstring(open('bp-1431.xml').read())
x = et.fromstring(open('bp-1431b.xml').read())
ns={'ns1':'http://servicemesh.com/agility/api'}
x.findall('.//variable')
x.findall('.//ns1:variable',ns)
e = x.findall('.//ns1:variable',ns)[0]
e.xpath('./name',ns)
e.xpath('./name')
e
e.xpath('.//name')
e.xpath('.//')
e.xpath('.//*')
help(e.xpath)
e.xpath('.//ns1:name',ns)
help(e.xpath)
e.xpath('.//ns1:name',namespaces=ns)
e = x.findall('.//ns1:variable',ns)[0]
e
print et.tostring(e,pretty_print=True)
e.xpath('.//ns1:name',namespaces=ns)
[i.text for i in e.xpath('.//ns1:name',namespaces=ns)]
e.xpath('./ns1:name',namespaces=ns)
[i.text for i in e.xpath('./ns1:name',namespaces=ns)]
reload(blueprints)
os.getcwd()
sys.path.append(
'..')
from cdc import blueprints
e
blueprints.get_vars(e)
e.xpath('./ns1:name',namespaces=ns)
reload(blueprints)
x
lx = blueprints.get_vars_xml(x)
lx
blueprints.get_vars(lx)
reload(blueprints)
blueprints.get_vars(lx)
e.xpath('./ns1:name/ns1:propertyType/ns1:name',namespaces=ns)
e
print et.tostring(e,pretty_print=True)
e.xpath('./ns1:propertyType/ns1:name',namespaces=ns)
reload(blueprints)
blueprints.get_vars(lx)
pp(blueprints.get_vars(lx))
reload(blueprints)
pp(blueprints.get_vars(lx))
quit()
import datetime
datetime.datetime.now()
n = datetime.datetime.now()
help(datetime.datetime.strftime)
datetime.datetime.strftime('%M')
datetime.datetime.strftime(n,'%M')
datetime.datetime.strftime(n,'%M%D%d%H%M')
datetime.datetime.strftime(n,'%M%D')
datetime.datetime.strftime(n,'+%M%D')
datetime.datetime.strftime(n,'%M')
datetime.datetime.strftime(n,'%D')
datetime.datetime.strftime(n,'%d')
datetime.datetime.strftime(n,'%d%M')
datetime.datetime.strftime(n,'%d%Y')
datetime.datetime.strftime(n,'%h')
datetime.datetime.strftime(n,'%H')
datetime.datetime.strftime(n,'%M')
datetime.datetime.strftime(n,'%H%M')
quit90
quit()
import pyxmldiff
help(pyxmldiff)
help
help(pyxmldiff.xmldiff)
from pyxmldiff import xmldiff
help(xmldiff)
from lxml import etree as et
e0 = et.fromstring(open('bp-1431.xml','rt'))
e0 = et.fromstring(open('bp-1431.xml','rt').read())
e1 = et.fromstring(open('bp-1431b.xml','rt').read())
xmldiff(e0,e1)
e1 = open('bp-1431b.xml','rt').read()
e0 = open('bp-1431.xml','rt').read()
xmldiff(e0,e1)
xmldiff.xmlDiff(e0,e1)
help(xmldiff)
help(xmldiff.xmlDiff)
quit()
from lxml import etree as et
import xml_diff
help(xml_diff)
e0 = open('bp-1431.xml','rt').read()
e1 = open('bp-1431b.xml','rt').read()
xml_diff.compare(e0,e1)
e0 = et.fromstring(open('bp-1431.xml','rt').read())
e1 = et.fromstring(open('bp-1431b.xml','rt').read())
xml_diff.compare(e0,e1)
e1 = et.fromstring(open('bp-1431b.xml','rt').read().encode('utf-8'))
e0 = et.fromstring(open('bp-1431.xml','rt').read().encode('utf-8'))
xml_diff.compare(e0,e1)
help(xml_diff)
help(xml_diff.compare)
e0t = open('bp-1431.xml','rt').read()
e1t = open('bp-1431b.xml','rt').read()
xml_diff.compare(e0t,e1t)
e0t
e1t
quit()
import xml_compare
help(xml_compare)
from lxml import etree as et
e0 = et.fromstring(open('bp-1431.xml','rt').read().encode('utf-8'))
e1 = et.fromstring(open('bp-1431b.xml','rt').read().encode('utf-8'))
from xml_compare import xml_compare
xmlcompare(e0,e1)
k
xml_compare(e0,e1)
help(xml_compare.doReport)
from xml_compare import xml_compare as xc
import xml_compare
help(xml_compare.doReport)
help(xml_compare)
xml_compare(e0,e1,reporter=sys.stderr.write,strip_whitespaces=True,float_compare=True)
xc(e0,e1,reporter=sys.stderr.write,strip_whitespaces=True,float_compare=True)
xc(e0,e1,reporter=sys.stderr.write,strip_whitespaces=True)
asset xc(e0,e1,reporter=sys.stderr.write,strip_whitespaces=True)
assert xc(e0,e1,reporter=sys.stderr.write,strip_whitespaces=True)
assert True
assert False
assert xc(e0,e0,reporter=sys.stderr.write,strip_whitespaces=True)
quit()
from datetime import datetime
sys.path.append('..')
from cdc import blueprints
n = datetime.now()
datetime.strftime(n,'%M')
datetime.strftime(n,'%S')
l
datetime.now()
datetime.strftime(datetime.now(),'%S')
quit()
e0 = et.fromstring(open('bp-1431.xml','rt').read().encode('utf-8'))
from lxml import etree as et
e0 = et.fromstring(open('bp-1431.xml','rt').read().encode('utf-8'))
sys.path.append('..')
from cdc import blueprints
from cdc.blueprints import *
pxml(e0)
import test_blueprints
from test_blueprints import *
pxml(e0)
pxml(get_vars_xml(e0))
pxml(get_vars_xml(e0)[0])
e = get_vars_xml(e0)[0]
pxml(e)
e['variable']
quit()
from lxml import etree as et
e0 = et.fromstring(open('bp-1431.xml','rt').read().encode('utf-8'))
e1 = e0.find('
ns={'ns1':'http://servicemesh.com/agility/api'}
e1 = e0.find('./ns1:variable',ns)
e1
e1.getparent()
quit()
d = {'a':1}
import pickle
pickle.dumps(d)
sys.path.append('..')
from cdc import util
c = util.Cfg({'a':1})
reload(util)
c = util.Cfg({'a':1})
c
reload(util)
util.Cfg({'a':1})
reload(util)
util.Cfg({'a':1})
x = util.Cfg({'a':1})
x
x.keys()
reload(util)
x = util.Cfg({'a':1})
x.dumps
x.dumps()
y
y = x.loads()
z = x.dumps()
z2 = pickle.loads(z)
z2
reload(util)
z
c = util.AssetCfg(z)
c
c.d
reload(util)
c = util.AssetCfg(z)
c
c.d
quit()
d = {'a':1}
d2 = dict(d)
d2
quit()
d = {'a':1}
import base64
z
z = x.dumps()
z
z = pickle.dumps(d)
import pickle
z = pickle.loads(d)
z = pickle.dumps(d)
z
base64.encode(z)
help(base64.encode)
help(base64.encodestring)
base64.encodestring(z)
quit()
sys.path.append('..')
from lxml import etree as et
e0 = et.fromstring(open('bp-1431b.xml','rt').read().encode('utf-8'))
e0
from cdc import xml
xml.is_var(e0,'zzcfg')
v = e0.findall('.//ns1:variable')
ns={'ns1':'http://servicemesh.com/agility/api'}
v = e0.findall('.//ns1:variable',namespaces=ns)
v
e0.keys()
[i.tag for i in e0.iterchildren()]
[re.sub('{.*}','',i.tag) for i in e0.iterchildren()]
import re
[re.sub('{.*}','',i.tag) for i in e0.iterchildren()]
pp([re.sub('{.*}','',i.tag) for i in e0.iterchildren()])
f1 = lambda e0:[re.sub('{.*}','',i.tag) for i in e0.iterchildren()]
[pp(f1(i)) for i in v]
f1 = lambda e0:[re.sub('{.*}','',i.tag,i.text) for i in e0.iterchildren()]
[pp(f1(i)) for i in v]
f1 = lambda e0:[(re.sub('{.*}','',i.tag),i.text) for i in e0.iterchildren()]
[pp(f1(i)) for i in v]
xml.is_var(e0,'zzcfg')
e0.find('./ns1:variable/ns1:name')
e0.find('./ns1:variable/ns1:name',namespaces=ns)
e0.find('./ns1:variable/ns1:name',namespaces=ns).text
e0.findall('./ns1:variable/ns1:name')
e0.findall('./ns1:variable/ns1:name',namespaces=ns)
e0.findall('./ns1:variable/ns1:name',namespaces=ns)[1].name
e0.findall('./ns1:variable/ns1:name',namespaces=ns)[1].text
reload(util)
from cdc import xml
reload(xml)
xml.is_var(e0,'zzcfg')
xml.is_var(e0,'zzcfg2')
v
v = e0.findall('.//ns1:variable/ns1:name',namespaces=ns)
v
e0.findall('./ns1:variable/ns1:name',namespaces=ns)[1].text
[i.text for i in v]
xml.is_var(e0,'zzcfg2')
xml.is_var(e0,'zzcfg')
reload(xml)
xml.get_var(e0,'z')
xml.get_var(e0,'zzcfg')
reload(xml)
xml.get_var(e0,'zzcfg')
quit()
d = json.loads(open('load_assetcfg.json','rt').read())
import json
d = json.loads(open('load_assetcfg.json','rt').read())
help(json.loads)
d = json.loads(open('load_assetcfg.json','rt').read())
pp(d)
d = json.loads(open('load_assetcfg.json','rt').read())
quit()
from lxml import etree as et
e0 = et.fromstring(open('bp-1431b.xml','rt').read().encode('utf-8'))
e0
e0.findall('./ns1:variables')
ns={'ns1':'http://servicemesh.com/agility/api'}
e0.findall('./ns1:variables',namespaces=ns)
e0.findall('./ns1:variable',namespaces=ns)
De0.findall('./ns1:variable',namespaces=ns)
sys.path.append('..')
from cdc import blueprints as bps
from cdc import xml
xml.get_dvars(e0)
xml.var_xml(e0)
help(xml)
reload(xml)
help(xml)
from cdc import xml
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
reload(xml)
help(xml)
quit()
sys.path.append('..')
from cdc import xml
help(xml)
e0 = et.fromstring(open('bp-1431b.xml','rt').read().encode('utf-8'))
from lxml import etree as et
e0 = et.fromstring(open('bp-1431b.xml','rt').read().encode('utf-8'))
e0
help(xml)
reload(xml)
help(xml)
xml.get_lxvars(e0)
xml.get_dvars(xml.get_lxvars(e0))
pp(xml.get_dvars(xml.get_lxvars(e0)))
e0.
De0.findall('./ns1:variable',namespaces=ns)
e0.findall('./ns1:variable',namespaces=ns)
ns={'ns1':'http://servicemesh.com/agility/api'}
e0.findall('./ns1:variable',namespaces=ns)
x = e0.findall('./ns1:variable',namespaces=ns)[0]
e0.remove(x)
pp(xml.get_dvars(xml.get_lxvars(e0)))
quit()
sys.path.append('..')
import sys;sys.path.append('..')
from cdc import blueprints as bps
bps.load_assets(asset_type='BP',maxn=2)
help(bps.load_assets)
bps.load_assets(asset_types=['BP'],maxn=2)
bps.load_assets(asset_types=['BP'],maxn=999)
help(bps.get_assets)
b = bps.get_assets(asset_type='BP')
bps.rpt3(b)
len(l4)
l4
help(bps.get_asset)
[i for i,j in l4 if '309' in j.cid]
[i for i,j in enumerate(l4) if '309' in j.cid]
[i for i,j in enumerate(l4) if '309' in j[0].cid]
x = l4[15]
x
pp(x)
l_wkld_pkgs = rpt_workload_pkgs(b)
lb = b
len(lb)
b = x
b
l_wkld_pkgs = rpt_workload_pkgs(b)
l_wkld_pkgs = bps.rpt_workload_pkgs(b)
l_wkld_pkgs = bps.rpt_workload_pkgs(lb)
l_wkld_pvars = rpt_workload_pkg_pvars(l_wkld_pkgs)
l_wkld_pvars = bps.rpt_workload_pkg_pvars(l_wkld_pkgs)
lbp_pvars = rpt_bp_pvars(l_wkld_pvars)
lbp_pvars = bps.rpt_bp_pvars(l_wkld_pvars)
lbp_pvars
len(lbp_pvars)
pp(lbp_pvars[0])
[i for i,j in enumerate(lbp_pvars) if '309' in j[0].cid]
x = lbp_pvars[15]
x
b
b0 = b[0]
b0.vars
l4b = [b]
b2 = [b]
bps.rpt3(b2)
b = bps.get_assets(asset_type='BP')
b[15]
[i for i,j in enumerate(l4) if '309' in j[0].cid]
bps.rpt3(b)
reload(bps)
bps.rpt3(b)
bps.rpt3(b2)
b2
b[0]
b[1]
bps.rpt3([b[15]])
reload(bps)
bps.rpt3([b[15]])
reload(bps)
bps.rpt3([b[15]])
[i for i,j in l4 if '309' in j.cid]
[i for i,j in enumerate(b) if '309' in j.cid]
bps.rpt3([b[18]])
reload(bps)
bps.rpt3([b[18]])
reload(bps)
bps.rpt3([b[18]])
reload(bps)
b = bps.get_assets(asset_type='BP')
bps.rpt3([b[18]])
b
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
b = bps.get_assets(asset_type='BP')
len(b)
[i for i,j in enumerate(b) if '309' in j.cid]
bps.rpt3([b[18]])
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
b = bps.get_assets(asset_type='BP')
bps.rpt3([b[18]])
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
b = bps.get_assets(asset_type='BP')
bps.rpt3([b[18]])
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
l_wkld_pkgs = bps.rpt_workload_pkgs(lb)
lb
b
bps.rpt3([b[18]])
l_wkld_pkgs = bps.rpt_wkld_pkgs([b[18]])
reload(bps)
l_wkld_pkgs = bps.rpt_wkld_pkgs([b[18]])
l_wkld_pkgs = rpt_wkld_pkgs([b[18]])
reload(bps)
bps.load_assets(asset_types=['BP'],maxn=999)
lb = bps.get_assets(asset_type='BP')
b = [lb[18]]
b
l_wkld_pkgs = rpt_wkld_pkgs(b)
l_wkld_pkgs = bps.rpt_wkld_pkgs(b)
l_wkld_pkgs
[i for i,j in enumerate(lb) if 'OWA' in j.cid]
[i for i,j in enumerate(lb) if 'OWA' in j.name]
len(lb)
[i for i,j in enumerate(lb) if 'Office W' in j.name]
b = [lb[11]]
l_wkld_pkgs = bps.rpt_wkld_pkgs(b)
l_wkld_pkgs
l_wkld_pvars = rpt_wkld_pkg_pvars(l_wkld_pkgs)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
l_wkld_pvars
pp(l_wkld_pvars)
reload(bps)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
reload(bps)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
reload(bps)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
reload(bps)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
pp(l_wkld_pkgs)
[1].extend([2])
x  = [1].extend([2])
x
reload(bps)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
pp(l_wkld_pvars)
reload(bps)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
pp(l_wkld_pvars)
reload(bps)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
pp(l_wkld_pvars)
reload(bps)
l_wkld_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
pp(l_wkld_pvars)
quit()
import sys;sys.path.append('..')
from cdc import blueprints as bps
l_wkld_pkg_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
l_wkld_pkgs = bps.rpt_wkld_pkgs(b)
lb = bps.get_assets(asset_type='BP')
lb
bps.load_assets(asset_types=['BP'],maxn=999)
lb = bps.get_assets(asset_type='BP')
len(lb)
b = [lb[11]]
b
l_wkld_pkgs = bps.rpt_wkld_pkgs(b)
l_wkld_pkg_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
pp(l_wkld_pkg_pvars)
reload(bps)
quit()
def f1(x):
 x+=1
y = 1
f1(y)
y
range(0,10,2)
[r for r,c in enumerate(range(0,10,2))]
quit()
import sys;sys.path.append('..')
bps.load_assets(asset_types=['BP'],maxn=999)
from cdc import blueprints as bps
bps.load_assets(asset_types=['BP'],maxn=999)
lb = bps.get_assets(asset_type='BP')
b = [lb[11]]
b
x = b[0]
x
x.workloads
[i.vars for i in x.workloads]
pp([i.vars for i in x.workloads])
l_wkld_pkgs = bps.rpt_wkld_pkgs(b)
pp(bps.rpt_wkld_pkg_pvars(l_wkld_pkgs))
reload(bps)
pp(bps.rpt_wkld_pkg_pvars(l_wkld_pkgs))
reload(bps)
pp(bps.rpt_wkld_pkg_pvars(l_wkld_pkgs))
quit()
import sys;sys.path.append('..')
from cdc import blueprints as bps
bps.load_assets(asset_types=['BP'],maxn=999)
lb = bps.get_assets(asset_type='BP')
[i for i,j in enumerate(lb) if 'SQL' in j.name]
b = [lb[17],lb[22],bl[25],lb[50],lb[51]]
b = [lb[17],lb[22],lb[25],lb[50],lb[51]]
l_wkld_pkgs = bps.rpt_wkld_pkgs(b)
l_wkld_pkg_pvars = bps.rpt_wkld_pkg_pvars(l_wkld_pkgs)
from cdc import report
report.create_xls_s(l_wkld_pkg_pvars)
sorted([1,3,1])
reload(bps)
report.create_xls_s(l_wkld_pkg_pvars)
reload(bps)
report.create_xls_s(l_wkld_pkg_pvars)
reload(bps)
report.create_xls_s(l_wkld_pkg_pvars)
reload(bps)
report.create_xls_s(l_wkld_pkg_pvars)
reload(bps)
report.create_xls_s(l_wkld_pkg_pvars)
reload(report)
report.create_xls_s(l_wkld_pkg_pvars)
reload(report)
report.create_xls_s(l_wkld_pkg_pvars)
reload(report)
report.create_xls_s(l_wkld_pkg_pvars)
reload(report)
report.create_xls_s(l_wkld_pkg_pvars)
reload(report)
report.create_xls_s(l_wkld_pkg_pvars)
reload(report)
report.create_xls_s(l_wkld_pkg_pvars)
reload(report)
report.create_xls_s(l_wkld_pkg_pvars)
quit()
import json
f = open('xx.txt','wt')
d = {'a':1}
f.write(json.dumps(d))
f.close()
quit()
Q
quit9)
quit()
import re
re.match('(BP|SCRPT|PKG)-([0-9]{4})','BP-1234').groups()
re.match('(BP|SCRPT|PKG)-([0-9]{4})','SCRPT-1234').groups()
re.match('(BP|SCRPT|PKG)-([0-9]{4})','SCRPT-134').groups()
re.match('(BP|SCRPT|PKG)-([0-9]{1:4})','SCRPT-134').groups()
re.match('(BP|SCRPT|PKG)-([0-9]{1,4})','SCRPT-134').groups()
re.match('(BP|SCRPT|PKG)-([0-9]{1,4})','SCRPT-13444').groups()
re.match('(BP|SCRPT|PKG)-([0-9]{1,4})','SCRPT-134444').groups()
re.match('(BP|SCRPT|PKG)-([0-9]{1,2})','SCRPT-134444').groups()
re.match('(BP|SCRPT|PKG)-([0-9]+$)','SCRPT-134444').groups()
re.match('(BP|SCRPT|PKG)-([0-9]+$)','SCRPT-1').groups()
quit()
from datetime import datetime
datetime.now().strftime("%Y%m%dT%H%M")
quit()
l = [u'detailedAssetPath', u'instanceId', u'image', u'id', u'cloud', u'description', u'assetType', u'assetPath', u'uuid', u'top', u'hostname', u'lastStartedOrStoppedBy', u'environment', u'state', u'location', u'template', u'privateAddress', u'resources', u'removable', u'scriptstatusLinks', u'startTime', u'credentials', u'stack', u'name', u'assetProperties', u'lifecycleVersion', u'model', u'onboarded']
l
pp(sorted(l))
quit()
l = sorted([2,1])
l
quit()
d = {}
d.items()
len(d.items())
quit()
import sys;sys.path.append('..')
from cdc import deploy
reload(deploy)
l = deploy.p1('')
os.listdir('.')
os.listdir('folderitems-20150526.txt','wt')
os.listdir('folderitems-20150526.txt')
l = deploy.p1('folderitems-20150526.txt')
quit()
import sys;sys.path.append('..')
from cdc import deploy
l = deploy.p1('folderitems-20150526.txt')
os.listdir('folderitems-20150526.txt')
os.listdir('.')
os.listdir('installitems-20150526.txt')
os.listdir('install_items-20150526.txt')
l = deploy.p1('isntall_items-20150526.txt')
l = deploy.p1('install_items-20150526.txt')
len(l)
l[0]
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
l[0]
l[1]
reload(deploy)
deploy.p1('install_items-20150526.txt')[0]
l =deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')[0]
l = open('install_items-20150526.txt','r').readlines()
l = open('install_items-20150526.txt','r','utf-8').readlines()
l = open('install_items-20150526.txt','utf-8').readlines()
l = open('install_items-20150526.txt','r','utf-8').readlines()
import os
l = open('install_items-20150526.txt','r','utf-8').readlines()
l = o.sopen('install_items-20150526.txt','r','utf-8').readlines()
l = os.open('install_items-20150526.txt','r','utf-8').readlines()
os.open('install_items-20150526.txt','r').readlines()[0]
open('install_items-20150526.txt','r').readlines()[0]
open('install_items-20150526.txt','r').readlines()[0].encode('utf8')
open('install_items-20150526.txt','r').readlines()[0].encode('utf8',errors='ignore')
open('install_items-20150526.txt','r').readlines()[0].decode('utf8',errors='ignore')
open('install_items-20150526.txt','r').readlines()[0].decode('ascii',errors='ignore')
open('install_items-20150526.txt','r').readlines()[0].encode('ascii',errors='ignore')
open('install_items-20150526.txt','r')
open('install_items-20150526.txt','r').readlines()[0]
open('install_items-20150526.txt','r').readlines()[0].decode('utf16')
open('install_items-20150526.txt','r').readlines()[0]
open('install_items-20150526.txt','r').readlines()[0].rstrip().decode('utf-16')
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
len(l)
l[0]
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
l[0]
reload(deploy)
deploy.get_component(l[0][0])
l[0]
deploy.get_component(l[0][0])
reload(deploy)
deploy.get_component(l[0][0])
reload(deploy)
deploy.get_component(l[0][0])
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
reload(deploy)
l = deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
kkk
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
reload(deploy)
deploy.p1('install_items-20150526.txt')
quit()

import sys;sys.path.append('..')

from cdc import deploy
quit()
